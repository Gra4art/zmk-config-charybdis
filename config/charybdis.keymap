#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        mouse_scroll {
            timeout-ms = <50>;
            key-positions = <53 54>;  // MB1 + MB2
            bindings = <&mo 1>;
        };
    };

    behaviors {
        td_LBKT_RBKT: tap_dance_LBKT_RBKT {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LBKT_RBKT";
            tapping-term-ms = <210>;
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        minus_plus: minus_plus {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_PLUS";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp EQUAL>;
        };

        shift_capsword: shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPSWORD";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp GRAVE   &kp N1       &kp N2      &kp N3           &kp N4        &kp N5       &kp N6     &kp N7             &kp N8      &kp N9      &kp N0          &minus_plus
&kp TAB     &kp Q        &kp W       &kp E            &kp R         &kp T        &kp Y      &kp U              &kp I       &kp O       &kp P           &td_LBKT_RBKT
&kp ESC     &mt LCTRL A  &mt LALT S  &mt LGUI D       &mt LSHIFT F  &kp G        &kp H      &mt RSHIFT J       &mt RGUI K  &mt RALT L  &mt RCTRL SEMI  &kp APOS
&kp LSHIFT  &lt 3 Z      &kp X       &kp C            &kp V         &kp B        &kp N      &kp M              &kp COMMA   &kp DOT     &lt 3 SLASH     &kp BACKSLASH
                                     &shift_capsword  &kp LALT      &kp ENTER    &kp ENTER  &mt DEL BACKSPACE
                                                      &mkp MB1      &mkp MB2     &kp SPACE
            >;
        };

        NAV {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3    &kp F4      &kp F5               &kp F6           &kp F7  &kp F8  &kp F9  &kp F10          &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp UP    &kp EQUAL   &kp LBRC             &kp RBRC         &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &trans
&kp PRINTSCREEN  &kp INSERT      &kp LEFT         &kp DOWN  &kp RIGHT   &kp LBKT             &kp RBKT         &kp N4  &kp N5  &kp N6  &kp KP_MINUS     &kp KP_DIVIDE
&trans           &kp DEL         &kp PG_UP        &kp CAPS  &kp PG_DN   &kp LPAR             &kp RPAR         &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &trans
                                                  &trans    &trans      &kp C_VOLUME_DOWN    &kp C_VOLUME_UP  &trans
                                                            &kp KP_DOT  &kp N0               &mo 3
            >;
        };
    };
};

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};
